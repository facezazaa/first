from sklearn.neighbors import KNeighborsClassifier
import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="Cirrhosis Survival Prediction", layout="wide")

st.title('üîÆ ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÇ‡∏£‡∏Ñ‡∏ï‡∏±‡∏ö‡πÅ‡∏Ç‡πá‡∏á‡∏î‡πâ‡∏ß‡∏¢ K-Nearest Neighbor')

# -------------------------------
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# -------------------------------
@st.cache_data
def load_data():
    return pd.read_csv("./data/cirrhosis.csv")

dt = load_data()

st.subheader("üëÄ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
col1, col2 = st.columns(2)
with col1:
    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å 10 ‡πÅ‡∏ñ‡∏ß")
    st.write(dt.head(10))
with col2:
    st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 10 ‡πÅ‡∏ñ‡∏ß")
    st.write(dt.tail(10))

# -------------------------------
# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
# -------------------------------
st.subheader("üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.write(dt.describe(include="all"))

# -------------------------------
# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
# -------------------------------
target_col = "Status"   # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡∏ö‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (0=‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï, 1=‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï)

if target_col not in dt.columns:
    st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{target_col}' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    st.stop()

st.subheader("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
feature = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", [c for c in dt.columns if c != target_col])

st.write(f"### üéØ Boxplot: {feature} ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢")
fig, ax = plt.subplots()
sns.boxplot(data=dt, x=target_col, y=feature, ax=ax)
st.pyplot(fig)

if st.checkbox("‚úÖ ‡πÅ‡∏™‡∏î‡∏á Pairplot (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•)"):
    st.write("### üå∫ Pairplot: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    fig2 = sns.pairplot(dt, hue=target_col)
    st.pyplot(fig2)

# -------------------------------
# Preprocess
# -------------------------------
def preprocess(df):
    df2 = df.copy()

    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ categorical ‡∏Å‡πà‡∏≠‡∏ô
    for col in df2.columns:
        if df2[col].dtype == "object":
            df2[col] = df2[col].astype("category")

    # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ missing
    for col in df2.columns:
        if str(df2[col].dtype) == "category":
            df2[col] = df2[col].cat.add_categories("Unknown").fillna("Unknown")
            df2[col] = df2[col].cat.codes
        else:
            df2[col] = df2[col].fillna(df2[col].mean())

    return df2

dt_proc = preprocess(dt)

X = dt_proc.drop(target_col, axis=1)
y = dt_proc[target_col]

# -------------------------------
# Train Model
# -------------------------------
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X, y)

# -------------------------------
# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å dataset
# -------------------------------
st.subheader("üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
rand_row = dt.sample(1, random_state=42)  # ‡∏™‡∏∏‡πà‡∏° 1 ‡πÅ‡∏ñ‡∏ß
st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á):")
st.write(rand_row)

x_input_proc = preprocess(rand_row)
x_input_proc = x_input_proc.reindex(columns=X.columns, fill_value=0)
x_input_proc = x_input_proc.fillna(0)   # ‡∏Å‡∏±‡∏ô NaN ‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á

# -------------------------------
# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
# -------------------------------
st.subheader("üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
prediction = model.predict(x_input_proc)[0]
prob = model.predict_proba(x_input_proc)[0]

if prediction == 1:   # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 1 = ‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
    st.success(f"‚úÖ ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏™‡∏π‡∏á (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {prob[1]*100:.2f}%)")
    st.image("./img/12.jpg", width=300)
else:
    st.error(f"‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {prob[0]*100:.2f}%)")
    st.image("./img/13.jpg", width=300)
